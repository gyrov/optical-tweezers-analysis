import numpy
from numba import jit

def calc_MSD(x,y):
    dx = (x - numpy.average(x))
    dy = (y - numpy.average(y))
    N = len(x)
    rhon = numpy.zeros(N)
    rhon = gen_rhon(dx,dy,rhon,N)
    return rhon

def calc_AUTOC(x,y):
    dx = (x - numpy.average(x))
    dy = (y - numpy.average(y))
    N = len(dx)
    var = numpy.sum(dx**2 + dy**2)/N
    A = numpy.zeros(N)
    A = gen_autoc(dx,dy,A,N,var)
    return A

def calc_MSD1Ds(x,y):
    dx = (x - numpy.average(x))
    dy = (y - numpy.average(y))
    N = len(x)
    rhonx = numpy.zeros(N)
    rhony = numpy.zeros(N)
    rhonx = gen_1d_rhon(dx,rhonx,N)
    rhony = gen_1d_rhon(dy,rhony,N)
    return rhonx, rhony

@jit(nopython=True)
def gen_autoc(dx,dy,A,N,var):
    for T in range(0,N):
        A_tau = 0
        idx = 0
        for T_i in range(0,N-T):
            A_tau = A_tau + dx[T_i]*dx[T_i+T] + dy[T_i]*dy[T_i+T]
            idx = idx + 1
        A[T] = (A_tau/idx)/var
    return A

@jit(nopython=True)
def gen_rhon(dx,dy,rhon,N):
    for n in range(1,N):
        rhoni = 0 
        for i in range(0,N-n):
            rhoni = rhoni + ((dx[i+n]-dx[i])**2 +(dy[i+n]-dy[i])**2)
        rhon[n] = rhoni*(1/(N-n))
    return rhon

@jit(nopython=True)
def gen_1d_rhon(d,rhon,N):
    for n in range(1,N):
        rhoni = 0 
        for i in range(0,N-n):
            rhoni = rhoni + ((d[i+n]-d[i])**2)
        rhon[n] = rhoni*(1/(N-n))
    return rhon
